#Dinegerous in rust

A working example of Rocket, Diesel, Serde(xml,json),R2D2 postgres diesel connection pull and React.

Dinegerous is a website to display a restaurants inspection data on google maps. King County provides an xml download of all the data. The old site was ruby and elastic search. The server was simple and the data was pretty easy. Why not try out a new rust framework?!


A few changes from the old ruby include a react front end and a migration to postgres. The server is Rocket and react was setup with create-react-app. I am also parsing the xml file with serde now.


## Dev start

`rustup install nightly-2017-01-08`
`rustup default nightly-2017-01-08`

run the rocket server:

`diesel setup` #might not need this
`diesel migration run`
`cargo run`

run the front end:
you  need to run npm install.

`cd frontend3`
`npm install`
`npm start`

parse the xml file and create records:

`cd scraper`
`cargo run`


## Deploy

`cd frontend3`
`./build.sh`
`cd ..`
`git commit . -m "new assets"`
`git commit push`


aws ec2
`ssh to box`
`sudo su`
`yum install git gcc postgres<something devl> sqlite-<dev something> openssl* nginx`
// or install nginx from scratch http://www.augustkleimo.com/build-and-install-nginx-from-source-on-amazon-ec2-linux/
`chkconfig httpd on`
`vi vi /etc/nginx/nginx.conf`
install rustup and run commands above both as root and ec2-user
`git clone `
`cd rust-dine`
create .env file with postgres data
create Rocket.toml file https://api.rocket.rs/rocket/config/index.html#rockettoml make dev prod settings
`cargo build --release`
`cd scraper`
`cargo build --release`
`cargo run --release &` #takes 40 minutes about
`cd ..`
`cargo run --release`
test on port:8000 if aws is configured right it should work. debugging security groups or ports is up to you.
save ami
when launching put aws.sh in the user input and the server will start running.

aws tools:
ec2 (nanos)
loadbalancer
rds postgres
cloudfront for images only currently
(related IAM, security groups)


## issues

If you put anything in one public directory like an image or you change the index you need to do it both rust and npm currently
duplicate lat long is an issue
map doesnt reload on zoom
it looks bad
should cron the scrapper
